from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
import uuid

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
PHOTO, QUESTION, TRUTH_TEXT, FALSE_TEXT = range(4)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
post_answers = {}
scheduled_posts = []

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑–º–æ–≤–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ '–ü—Ä–∞–≤–¥–∞ —á–∏ –ë—Ä–µ—Ö–Ω—è'.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ /new —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )

async def new_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data'] = {}
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'):")
    return PHOTO

async def photo_or_no_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data['post_data']['photo'] = update.message.photo[-1].file_id
    elif update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ":
        context.user_data['post_data']['photo'] = None
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'.")
        return PHOTO

    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è:")
    return QUESTION

async def get_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['question'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ü—Ä–∞–≤–¥–∞':")
    return TRUTH_TEXT

async def get_truth_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['truth_text'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ë—Ä–µ—Ö–Ω—è':")
    return FALSE_TEXT

async def get_false_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['false_text'] = update.message.text

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π UUID –¥–ª—è –ø–æ—Å—Ç–∞
    post_uuid = str(uuid.uuid4())
    post_data = context.user_data['post_data']
    post_answers[post_uuid] = {
        "truth_text": post_data["truth_text"],
        "false_text": post_data["false_text"]
    }

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å—Ç", callback_data=f"preview_{post_uuid}")],
        [InlineKeyboardButton("–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data=f"publish_{post_uuid}")],
        [InlineKeyboardButton("–í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data=f"schedule_{post_uuid}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ü–æ—Å—Ç –≥–æ—Ç–æ–≤–∏–π. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ Telegram
    data = query.data

    post_uuid = data.split("_")[-1]  # –≤–∏—Ç—è–≥—É—î–º–æ UUID –ø–æ—Å—Ç–∞

    if data.startswith("preview_"):
        await send_post_to_user_chat(context, query.message.chat_id, post_uuid)

    elif data.startswith("publish_"):
        await send_post_to_channel(context, post_uuid)
        await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª!")
        post_answers.pop(post_uuid, None)

    elif data.startswith("schedule_"):
        scheduled_posts.append(post_uuid)
        await query.edit_message_text("‚è± –ü–æ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–∑–Ω—ñ—à–µ!")
    
    elif data.startswith("truth_"):
        text = post_answers.get(post_uuid, {}).get("truth_text", "‚úÖ –¶–µ –ø—Ä–∞–≤–¥–∞!")
        await query.answer(text=text, show_alert=True)

    elif data.startswith("false_"):
        text = post_answers.get(post_uuid, {}).get("false_text", "‚ùå –¶–µ –±—Ä–µ—Ö–Ω—è!")
        await query.answer(text=text, show_alert=True)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —É –∫–∞–Ω–∞–ª ---
async def send_post_to_channel(context: ContextTypes.DEFAULT_TYPE, post_uuid):
    post_data = post_answers.get(post_uuid)
    if not post_data:
        return

    channel_id = "@–¢–í–û–ô_–ö–ê–ù–ê–õ"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –∫–∞–Ω–∞–ª

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data=f"truth_{post_uuid}"),
            InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data=f"false_{post_uuid}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if post_data.get("photo"):
        await context.bot.send_photo(chat_id=channel_id, photo=post_data["photo"],
                                     caption=post_data["question"], reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=channel_id, text=post_data["question"],
                                       reply_markup=reply_markup)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ---
async def send_post_to_user_chat(context: ContextTypes.DEFAULT_TYPE, chat_id, post_uuid):
    post_data = post_answers.get(post_uuid)
    if not post_data:
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data=f"truth_{post_uuid}"),
            InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data=f"false_{post_uuid}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if post_data.get("photo"):
        await context.bot.send_photo(chat_id=chat_id, photo=post_data["photo"],
                                     caption=post_data["question"], reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=chat_id, text=post_data["question"],
                                       reply_markup=reply_markup)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    token = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new", new_post)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO | filters.Regex("^–±–µ–∑ —Ñ–æ—Ç–æ$"), photo_or_no_photo)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_question)],
            TRUTH_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_truth_text)],
            FALSE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_false_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("start", start))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    app.run_polling()

if __name__ == "__main__":
    main()
