from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext
import copy
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone

# --- –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø–æ—Å—Ç—ñ–≤ ---
user_data = {}
scheduled_posts = []
posted_messages = {}  # –∫–ª—é—á: message_id, –∑–Ω–∞—á–µ–Ω–Ω—è: {"truth_text":..., "false_text":..., "question":..., "photo":...}

MAX_ALERT_LENGTH = 200  # –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram –¥–ª—è show_alert

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ ---
scheduler = BackgroundScheduler(timezone=timezone('Europe/Kiev'))
scheduler.start()

# --- –ö–æ–º–∞–Ω–¥–∏ ---
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ '–ü—Ä–∞–≤–¥–∞ —á–∏ –ë—Ä–µ—Ö–Ω—è'.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ /new —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç."
    )

def new_post(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    user_data[chat_id] = {"step": "photo"}
    update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'):")

# --- –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ ---
def photo_handler(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    step = user_data.get(chat_id, {}).get("step")

    if step != "photo":
        return

    if update.message.text and update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ":
        user_data[chat_id]["photo"] = None
    elif update.message.photo:
        user_data[chat_id]["photo"] = update.message.photo[-1].file_id
    else:
        update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'.")
        return

    user_data[chat_id]["step"] = "question"
    update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è:")

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É ---
def text_handler(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    if chat_id not in user_data or "step" not in user_data[chat_id]:
        update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ /new —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç.")
        return

    step = user_data[chat_id]["step"]
    text = update.message.text

    if step == "question":
        user_data[chat_id]["question"] = text
        user_data[chat_id]["step"] = "truth_text"
        update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ü—Ä–∞–≤–¥–∞' (—Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ):")
    elif step == "truth_text":
        user_data[chat_id]["truth_text"] = text
        user_data[chat_id]["step"] = "false_text"
        update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ë—Ä–µ—Ö–Ω—è' (—Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ):")
    elif step == "false_text":
        user_data[chat_id]["false_text"] = text
        user_data[chat_id]["step"] = None
        keyboard = [
            [InlineKeyboardButton("–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="publish_now")],
            [InlineKeyboardButton("–í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data="schedule_post")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ –∑—Ä–æ–±–∏—Ç–∏ –∑ –ø–æ—Å—Ç–æ–º:", reply_markup=reply_markup)

# --- –û–± º—î–¥–Ω–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ç–æ —ñ —Ç–µ–∫—Å—Ç—É ---
def photo_or_text_handler(update: Update, context: CallbackContext):
    if update.message.photo or (update.message.text and update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ"):
        photo_handler(update, context)
    else:
        text_handler(update, context)

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data in ["truth", "false"]:
        msg_id = query.message.message_id
        if msg_id in posted_messages:
            text = posted_messages[msg_id]["truth_text"] if query.data == "truth" else posted_messages[msg_id]["false_text"]
            if len(text) > MAX_ALERT_LENGTH:
                text = text[:MAX_ALERT_LENGTH-3] + "..."
            query.answer(text=text, show_alert=True)
        else:
            query.answer(text="‚úÖ –ü—Ä–∞–≤–¥–∞" if query.data=="truth" else "‚ùå –ë—Ä–µ—Ö–Ω—è", show_alert=True)

    elif query.data == "publish_now":
        chat_id = query.message.chat.id
        post_data = user_data.get(chat_id)
        if post_data:
            send_post_to_channel(context, post_data)
            query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª!")
    elif query.data == "schedule_post":
        chat_id = query.message.chat.id
        post_data = user_data.get(chat_id)
        if post_data:
            scheduled_posts.append(copy.deepcopy(post_data))
            query.edit_message_text("‚è± –ü–æ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–∑–Ω—ñ—à–µ!")

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —É –∫–∞–Ω–∞–ª ---
def send_post_to_channel(context: CallbackContext, post_data):
    channel_id = "@checikavo"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –∫–∞–Ω–∞–ª –∞–±–æ -100...
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data="truth"),
            InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data="false")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if post_data.get("photo"):
        msg = context.bot.send_photo(chat_id=channel_id, photo=post_data["photo"],
                                     caption=post_data["question"], reply_markup=reply_markup)
    else:
        msg = context.bot.send_message(chat_id=channel_id, text=post_data["question"], reply_markup=reply_markup)

    posted_messages[msg.message_id] = {
        "truth_text": post_data.get("truth_text", "‚úÖ –ü—Ä–∞–≤–¥–∞"),
        "false_text": post_data.get("false_text", "‚ùå –ë—Ä–µ—Ö–Ω—è"),
        "question": post_data.get("question"),
        "photo": post_data.get("photo")
    }

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ ---
def send_scheduled(update: Update, context: CallbackContext):
    if not scheduled_posts:
        update.message.reply_text("–ù–µ–º–∞—î –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.")
        return

    for post in scheduled_posts:
        send_post_to_channel(context, post)
    scheduled_posts.clear()
    update.message.reply_text("‚úÖ –í—Å—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –ø–æ—Å—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ!")

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    token = "8142345174:AAFd3Nw40QjNLcr2dc3C0LI6_g7DBmCdOZ4"
    updater = Updater(token=token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("new", new_post))
    dp.add_handler(CommandHandler("send_scheduled", send_scheduled))
    dp.add_handler(MessageHandler(Filters.photo | Filters.text, photo_or_text_handler))
    dp.add_handler(CallbackQueryHandler(button))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
