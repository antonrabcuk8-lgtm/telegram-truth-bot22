from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext
import copy

# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ‚ö†Ô∏è –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –í–ê–®–ò–ú–ò –î–ê–ù–ò–ú–ò!
TELEGRAM_BOT_TOKEN = "8142345174:AAFd3Nw40QjNLcr2dc3C0LI6_g7DBmCdOZ4"
CHANNEL_ID = "@checikavo"  # –í–∞—à –∫–∞–Ω–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ @username –∞–±–æ ID (-100...)

# --- –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
# –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–∞–ª–∏—à–∏–º–æ in-memory
user_data = {}         # –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
scheduled_posts = []   # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
posted_messages = {}   # –ö–ª—é—á: message_id –∫–∞–Ω–∞–ª—É, –ó–Ω–∞—á–µ–Ω–Ω—è: dict –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

# --- –ö–æ–º–∞–Ω–¥–∏ ---

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ '–ü—Ä–∞–≤–¥–∞ —á–∏ –ë—Ä–µ—Ö–Ω—è'.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ /new, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç."
    )

def new_post(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /new —Ç–∞ —ñ–Ω—ñ—Ü—ñ—é—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞."""
    chat_id = update.message.chat_id
    user_data[chat_id] = {"step": "photo"}
    update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'):")

def send_scheduled(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /send_scheduled –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤."""
    global scheduled_posts
    
    if not scheduled_posts:
        update.message.reply_text("–ù–µ–º–∞—î –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.")
        return

    # –†–æ–±–∏–º–æ –∫–æ–ø—ñ—é, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –±–µ–∑–ø–µ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    posts_to_send = scheduled_posts[:]
    scheduled_posts.clear()
    
    for post in posts_to_send:
        # –î–æ–¥–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏, —Ö–æ—á–∞ —Ç—É—Ç –¥–∞–Ω—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –ø–æ–≤–Ω—ñ
        if "question" in post and "truth_text" in post and "false_text" in post:
            send_post_to_channel(context, post)

    update.message.reply_text(f"‚úÖ –£—Å—ñ {len(posts_to_send)} –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –ø–æ—Å—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---

def photo_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –∞–±–æ —Ç–µ–∫—Å—Ç—É '–±–µ–∑ —Ñ–æ—Ç–æ'."""
    chat_id = update.message.chat_id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –∫—Ä–æ—Ü—ñ
    if user_data.get(chat_id, {}).get("step") != "photo":
        return

    if update.message.text and update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ":
        user_data[chat_id]["photo"] = None
    elif update.message.photo:
        user_data[chat_id]["photo"] = update.message.photo[-1].file_id
    else:
        update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'.")
        return

    user_data[chat_id]["step"] = "question"
    update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è:")

def text_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è, —Ç–µ–∫—Å—Ç—É –ü—Ä–∞–≤–¥–∏ —Ç–∞ —Ç–µ–∫—Å—Ç—É –ë—Ä–µ—Ö–Ω—ñ."""
    chat_id = update.message.chat_id
    text = update.message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é
    if chat_id not in user_data or "step" not in user_data[chat_id]:
        # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        if update.message.text and not update.message.text.startswith('/'):
            update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ /new, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç.")
        return

    step = user_data[chat_id]["step"]

    if step == "question":
        user_data[chat_id]["question"] = text
        user_data[chat_id]["step"] = "truth_text"
        update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–≤–¥–∞' (—Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ):")
    
    elif step == "truth_text":
        user_data[chat_id]["truth_text"] = text
        user_data[chat_id]["step"] = "false_text"
        update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ë—Ä–µ—Ö–Ω—è' (—Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ):")
    
    elif step == "false_text":
        user_data[chat_id]["false_text"] = text
        user_data[chat_id]["step"] = None # –ó–∞–≤–µ—Ä—à—É—î–º–æ –∫—Ä–æ–∫
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∞–±–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="publish_now")],
            [InlineKeyboardButton("‚è± –í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data="schedule_post")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–æ–±–∏—Ç–∏ –∑ –ø–æ—Å—Ç–æ–º:", reply_markup=reply_markup)

# --- –û–± º—î–¥–Ω–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ç–æ —ñ —Ç–µ–∫—Å—Ç—É ---
def photo_or_text_handler(update: Update, context: CallbackContext):
    """–°–ø—Ä—è–º–æ–≤—É—î –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞."""
    # –û–±—Ä–æ–±–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ "photo"
    if update.message.photo or (update.message.text and update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ"):
        photo_handler(update, context)
    # –û–±—Ä–æ–±–∫–∞ –Ω–∞ —ñ–Ω—à–∏—Ö –∫—Ä–æ–∫–∞—Ö
    elif update.message.text:
        text_handler(update, context)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —É –∫–∞–Ω–∞–ª ---

def send_post_to_channel(context: CallbackContext, post_data):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç —É Telegram-–∫–∞–Ω–∞–ª."""
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –∑ —Ç–µ–∫—Å—Ç–æ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ KeyError
    question_text = post_data.get("question", "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.") 
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data="truth"),
            InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data="false")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
    if post_data.get("photo"):
        msg = context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=post_data["photo"],
            caption=question_text,
            reply_markup=reply_markup
        )
    # –Ü–Ω–∞–∫—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    else:
        msg = context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=question_text,
            reply_markup=reply_markup
        )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ message_id –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å —É –∫–∞–Ω–∞–ª—ñ
    posted_messages[msg.message_id] = {
        "truth_text": post_data["truth_text"],
        "false_text": post_data["false_text"]
    }

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ (CallbackQueryHandler) ---

def button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    data_btn = query.data

    # –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ answer() –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    query.answer() 

    # 1. –ö–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª—ñ (–ü—Ä–∞–≤–¥–∞/–ë—Ä–µ—Ö–Ω—è)
    if data_btn in ["truth", "false"]:
        msg_id = query.message.message_id
        
        if msg_id in posted_messages:
            # –ë–µ—Ä–µ–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            text = posted_messages[msg_id]["truth_text"] if data_btn == "truth" else posted_messages[msg_id]["false_text"]
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ answer, –∞–ª–µ –≤–∂–µ –∑ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ –≤—ñ–∫–Ω–∞
            query.answer(text=text, show_alert=True)
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –¥–∞–Ω—ñ –≤—Ç—Ä–∞—á–µ–Ω—ñ
            query.answer(text="‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    # 2. –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç—ñ (–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏/–í—ñ–¥–∫–ª–∞—Å—Ç–∏)
    elif data_btn in ["publish_now", "schedule_post"]:
        chat_id = query.message.chat.id
        post_data = user_data.get(chat_id)
        
        # üõë –ö–õ–Æ–ß–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–õ–Ø –£–ù–ò–ö–ù–ï–ù–ù–Ø 'KeyError: 'question''
        if not post_data or "question" not in post_data or "truth_text" not in post_data or "false_text" not in post_data:
            query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç –∑–Ω–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /new.",
                reply_markup=None
            )
            return

        # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—Ä–∞–∑
        if data_btn == "publish_now":
            send_post_to_channel(context, post_data)
            query.edit_message_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª!")
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –¥—ñ—ó
            del user_data[chat_id]
            
        # –í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é
        elif data_btn == "schedule_post":
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö
            scheduled_posts.append(copy.deepcopy(post_data))
            query.edit_message_text("‚è± –ü–æ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–∑–Ω—ñ—à–µ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /send_scheduled –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
            del user_data[chat_id]

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---

def main():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ Updater —Ç–∞ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω
    updater = Updater(token=TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("new", new_post))
    dp.add_handler(CommandHandler("send_scheduled", send_scheduled))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ñ–æ—Ç–æ —Ç–∞ —Ç–µ–∫—Å—Ç)
    # Filters.photo | Filters.text –æ–±—Ä–æ–±–ª—è—î —ñ —Ñ–æ—Ç–æ, —ñ —Ç–µ–∫—Å—Ç.
    dp.add_handler(MessageHandler(Filters.photo | Filters.text, photo_or_text_handler))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å Inline-–∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    # –ü–æ—á–∞—Ç–æ–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è Telegram —â–æ–¥–æ –Ω–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
    updater.start_polling()
    # –ë–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ Ctrl+C
    updater.idle()

if __name__ == "__main__":
    main()
