from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
import uuid

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
PHOTO, QUESTION, TRUTH_TEXT, FALSE_TEXT = range(4)
post_answers = {}
scheduled_posts = []

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–æ—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ '–ü—Ä–∞–≤–¥–∞ —á–∏ –ë—Ä–µ—Ö–Ω—è'.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ /new —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )

async def new_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data'] = {}
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'):")
    return PHOTO

async def photo_or_no_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data['post_data']['photo'] = update.message.photo[-1].file_id
        await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è:")
        return QUESTION
    elif update.message.text and update.message.text.lower() == "–±–µ–∑ —Ñ–æ—Ç–æ":
        context.user_data['post_data']['photo'] = None
        await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è:")
        return QUESTION
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ —Ñ–æ—Ç–æ'.")
        return PHOTO

async def get_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['question'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ü—Ä–∞–≤–¥–∞' (—Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ):")
    return TRUTH_TEXT

async def get_truth_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['truth_text'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è '–ë—Ä–µ—Ö–Ω—è' (—Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ):")
    return FALSE_TEXT

async def get_false_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_data']['false_text'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å—Ç", callback_data="preview_post")],
        [InlineKeyboardButton("–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="publish_now")],
        [InlineKeyboardButton("–í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data="schedule_post")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü–æ—Å—Ç –≥–æ—Ç–æ–≤–∏–π. –û–±–µ—Ä—ñ—Ç—å, —â–æ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    query_data = query.data

    if query_data == "preview_post":
        await send_post_to_user_chat(context, query.message.chat_id, context.user_data.get('post_data', {}))
        keyboard = [
            [InlineKeyboardButton("–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="publish_now")],
            [InlineKeyboardButton("–í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data="schedule_post")],
        ]
        await query.edit_message_text(
            "‚úÖ –ì–æ—Ç–æ–≤–∏–π –ø–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É. –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ–±–µ—Ä—ñ—Ç—å, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query_data.startswith("truth_"):
        post_uuid = query_data.split('_')[1]
        text = post_answers.get(post_uuid, {}).get("truth_text", "‚úÖ –¶–µ –ø—Ä–∞–≤–¥–∞!")
        await query.answer(text=text, show_alert=True)

    elif query_data.startswith("false_"):
        post_uuid = query_data.split('_')[1]
        text = post_answers.get(post_uuid, {}).get("false_text", "‚ùå –¶–µ –±—Ä–µ—Ö–Ω—è!")
        await query.answer(text=text, show_alert=True)

    elif query_data == "publish_now":
        post_data = context.user_data.get('post_data', {})
        if post_data:
            await send_post_to_channel(context, post_data)
            await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª!")
            context.user_data.clear()

    elif query_data == "schedule_post":
        post_data = context.user_data.get('post_data', {})
        if post_data:
            scheduled_posts.append(post_data.copy())
            await query.edit_message_text("‚è± –ü–æ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–∑–Ω—ñ—à–µ!")
            context.user_data.clear()

    elif query_data == "preview_truth":
        await query.answer(text=context.user_data.get('post_data', {}).get('truth_text', "‚úÖ –¶–µ –ø—Ä–∞–≤–¥–∞!"), show_alert=True)

    elif query_data == "preview_false":
        await query.answer(text=context.user_data.get('post_data', {}).get('false_text', "‚ùå –¶–µ –±—Ä–µ—Ö–Ω—è!"), show_alert=True)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —É –∫–∞–Ω–∞–ª ---
async def send_post_to_channel(context: ContextTypes.DEFAULT_TYPE, post_data):
    channel_id = "@checikavo"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –∫–∞–Ω–∞–ª
    post_uuid = str(uuid.uuid4())
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data=f"truth_{post_uuid}"),
         InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data=f"false_{post_uuid}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    post_answers[post_uuid] = {
        "truth_text": post_data["truth_text"],
        "false_text": post_data["false_text"]
    }
    if post_data.get("photo"):
        await context.bot.send_photo(chat_id=channel_id, photo=post_data["photo"],
                                     caption=post_data["question"], reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=channel_id, text=post_data["question"],
                                       reply_markup=reply_markup)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É ---
async def send_post_to_user_chat(context: ContextTypes.DEFAULT_TYPE, chat_id, post_data):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data="preview_truth"),
         InlineKeyboardButton("‚ùå –ë—Ä–µ—Ö–Ω—è", callback_data="preview_false")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if post_data.get("photo"):
        await context.bot.send_photo(chat_id=chat_id, photo=post_data["photo"],
                                     caption=post_data["question"], reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=chat_id, text=post_data["question"],
                                       reply_markup=reply_markup)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ ---
async def send_scheduled(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not scheduled_posts:
        await update.message.reply_text("–ù–µ–º–∞—î –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.")
        return
    await update.message.reply_text("–ü–æ—á–∏–Ω–∞—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
    for post_data in scheduled_posts:
        await send_post_to_channel(context, post_data)
    scheduled_posts.clear()
    await update.message.reply_text("‚úÖ –í—Å—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –ø–æ—Å—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ!")

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    token = "8142345174:AAFd3Nw40QjNLcr2dc3C0LI6_g7DBmCdOZ4"  # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('new', new_post)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO | filters.Regex('^–±–µ–∑ —Ñ–æ—Ç–æ$'), photo_or_no_photo)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_question)],
            TRUTH_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_truth_text)],
            FALSE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_false_text)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send_scheduled", send_scheduled))
    app.add_handler(CallbackQueryHandler(button))  # –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö callback-–∫–Ω–æ–ø–æ–∫

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    app.run_polling()

if __name__ == "__main__":
    main()
